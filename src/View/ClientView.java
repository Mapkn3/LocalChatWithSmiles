package View;

import Controller.ClientController;
import Model.Message;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import java.awt.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.Arrays;

public class ClientView extends JFrame {
    private ClientController mainClass;
    private boolean running;
    private JTextField messageField;
    private JButton sendButton;
    private JScrollPane chatPane;
    private JPanel panel1;
    private JEditorPane chatView;

    public ClientView(ClientController mainClass) {
        super(mainClass.getUser().getNickname());
        $$$setupUI$$$();
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.add(this.$$$getRootComponent$$$());
        this.pack();
        this.mainClass = mainClass;
        Thread clientRun = new Thread(() -> {
            System.out.println("Client start");
            running = true;
            receive();
        });
        clientRun.start();
        sendButton.addActionListener(e -> {
            try {
                String command = messageField.getText();
                String textMessage = command;
                String destination = "";
                if (command.startsWith("{to[")) {
                    destination = command.substring(4, command.indexOf("]}"));
                    textMessage = command.substring(command.indexOf("]}") + 2);
                }
                Message message = new Message(this.mainClass.getUser().getId(), textMessage, destination);
                this.mainClass.getUser().getNet().send(convertMessageToByte(message));
                messageField.setText(null);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        });
    }

    private void receive() {
        new Thread(() -> {
            while (running) {
                String message = this.mainClass.getUser().getNet().receive();
                addMessage(message);
                System.out.println(message);
                System.out.println("Wait message...");
            }
        }).start();
    }

    private void addMessage(String message) {
        try {
            HTMLDocument history = (HTMLDocument) this.chatView.getDocument();
            history.insertBeforeEnd(history.getDefaultRootElement(), message);
        } catch (BadLocationException | IOException e) {
            e.printStackTrace();
        }
    }

    public static byte[] convertMessageToByte(Object obj) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream os = new ObjectOutputStream(out);
        os.writeObject(obj);
        os.flush();
        return out.toByteArray();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setPreferredSize(new Dimension(400, 500));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        messageField = new JTextField();
        panel2.add(messageField, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Send");
        panel2.add(sendButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chatPane = new JScrollPane();
        chatPane.setVerticalScrollBarPolicy(22);
        panel1.add(chatPane, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        chatView = new JEditorPane();
        chatView.setContentType("text/html");
        chatView.setEditable(false);
        chatView.setText("<html>\r\n  <head>\r\n    \r\n  </head>\r\n  <body>\r\n  </body>\r\n</html>\r\n");
        chatPane.setViewportView(chatView);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
